{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["TileImg","props","tileRegion","autoTilerMap","Map","set","tileXY","get","undefined","tileX","tileY","y","inline_style","backgroundImage","backgroundPosition","className","style","isActive","console","log","backgroundColor","TileButton","onClick","tileIndex","TileEditor","state","map","Array","fill","handleClick","bind","genTileRegion","i","this","arrTileRegion","length","x","slice","setState","tileEditor","tileMap","curTile","push","id","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f5e26aa.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction TileImg(props) {\n  //const tileX = props.tileX\n  //const tileY = props.tileY\n\n  let tileRegion = props.tileRegion\n\n  // tileRegion is a bitset generated by genTileRegion of TileEditor\n  // so, each bit marks the presence of active or inactive neighbor tiles:\n  //\n  // bitset: 0b3210\n  // matrix (center is ignored):\n  // [   0\n  //  1     2\n  //     3   ],\n  //\n  // For each combination of tiles, there is one right tile, this is how\n  // auto-tiling works :D\n  //\n  // that said, this variable maps each tileRegion combination with an array, this array\n  // contains two entries, which is tileX and tileY.\n\n  // note: the order that I added the entries here is from the tileset, from upper-left, left-to-right.\n  const autoTilerMap = new Map()\n\n  // first line of tileset\n  //b3210\n  autoTilerMap.set(0b0000, [0, 0])\n  autoTilerMap.set(0b0100, [1, 0])\n  autoTilerMap.set(0b0110, [2, 0])\n  autoTilerMap.set(0b0010, [3, 0])\n\n  // second line of tileset\n  //b3210\n  autoTilerMap.set(0b1000, [0, 1])\n  autoTilerMap.set(0b1100, [1, 1])\n  autoTilerMap.set(0b1110, [2, 1])\n  autoTilerMap.set(0b1010, [3, 1])\n\n  // third line of tileset\n  //b3210\n  autoTilerMap.set(0b1001, [0, 2])\n  autoTilerMap.set(0b1101, [1, 2])\n  autoTilerMap.set(0b1111, [2, 2])\n  autoTilerMap.set(0b1011, [3, 2])\n\n  // fourth line of tileset\n  //b3210\n  autoTilerMap.set(0b0001, [0, 3])\n  autoTilerMap.set(0b0101, [1, 3])\n  autoTilerMap.set(0b0111, [2, 3])\n  autoTilerMap.set(0b0011, [3, 3])\n\n  let tileXY = autoTilerMap.get(tileRegion)\n\n  if (tileXY !== undefined) {\n    let tileX = tileXY[0];\n    let tileY = tileXY[1];\n\n    const x = -18 * tileX;\n    const y = -18 * tileY;\n\n    const inline_style = tileX >= 0 && tileY >= 0 ? {\n      backgroundImage: \"url('tileset.png')\",\n      backgroundPosition: `${x}px ${y}px`,\n    } : {}\n\n    return (\n      <div className=\"tileImg\" style={props.isActive ? inline_style : {}}>\n      </div>\n    );\n  } else { // remove later:\n    console.log(\"UNDEFINED tileXY: \" + tileRegion);\n    const inline_style = { backgroundColor: \"red\" }\n\n    return (\n      <div className=\"tileImg\" style={inline_style}>\n      </div>\n    );\n  }\n}\n\nfunction TileButton(props) {\n  return (\n    <button className={\"tilebutton\" + (props.isActive ? \" active_tile\" : \"\") } onClick={() => props.onClick(props.tileIndex)}>\n      {props.tileIndex}\n    </button>\n  );\n}\n\nclass TileEditor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      map: Array(50).fill(false),\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.genTileRegion = this.genTileRegion.bind(this);\n  }\n\n  genTileRegion(i) {\n    let map = this.state.map;\n\n    // first, create a 3x3 matrix as an array of 8 entries (because is ignoring `i`'s tile)\n    // [   0,\n    //  1,    2,\n    //     3   ],\n    let arrTileRegion = Array(4).fill(false);\n\n    arrTileRegion[0] = i - 10 >= 0 ? map[i - 10] : false;\n    arrTileRegion[1] = i -  1 >= 0 ? map[i -  1] : false;\n\n    arrTileRegion[2] = i +  1 < map.length ? map[i +  1] : false;\n    arrTileRegion[3] = i + 10 < map.length ? map[i + 10] : false;\n\n    // handle map boundaries\n    switch (i % 10) {\n      case 0: // left boundary\n        arrTileRegion[1] = false; // overwrite left tile as \"no-tile\"\n        break;\n      case 9: // right boundary\n        arrTileRegion[2] = false; // overwrite right tile as \"no-tile\"\n        break;\n    }\n\n    let tileRegion = 0\n\n    // then, convert the array (matrix) to a bitset: 0b3210\n    for (let x = 0; x < 4; x++)\n      tileRegion = tileRegion | ((arrTileRegion[x] ? 1 : 0) << x);\n\n    return tileRegion;\n  }\n\n  handleClick(tileIndex) {\n    let map = this.state.map.slice();\n    map[tileIndex] = !map[tileIndex];\n    this.setState({map: map})\n  }\n\n  render() {\n    let tileEditor = [];\n    let tileMap = [];\n\n    let map = this.state.map;\n    for (let i = 0; i < 50; i++) {\n      let curTile = map[i];\n\n      let tileRegion = this.genTileRegion(i);\n\n      tileEditor.push(<TileButton tileIndex={i} onClick={this.handleClick} isActive={curTile} key={i} />);\n\n      tileMap.push(<TileImg key={i} isActive={curTile} tileRegion={tileRegion} tileIndex={i} />);\n\n      if (i % 10 === 9) {\n        tileEditor.push(<br key={i + \"_TE_br\"}/>);\n        tileMap.push(<br key={i + \"_TM_br\"}/>);\n      }\n    }\n\n    return (\n      <>\n        <div id=\"tilebuttons\">\n          {tileEditor}\n        </div>\n        <div id=\"tile_preview\">\n          {tileMap}\n        </div>\n      </>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main>\n        <h1>Autotile test, made by Andr√© Luiz Alvares :3</h1>\n        <p>This is a test</p>\n        <TileEditor />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}