{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["TileImg","props","tileRegion","autoTilerMap","Array","fill","tileXY","tileX","y","inline_style","backgroundImage","backgroundPosition","className","style","isActive","TileButton","onClick","tileIndex","TileEditor","state","map","handleClick","bind","genTileRegion","i","this","arrTileRegion","length","x","slice","setState","tileEditorButtons","tileMapTiles","curTile","push","id","React","Component","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a004587.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction TileImg(props) {\n  let tileRegion = props.tileRegion\n\n  // tileRegion is a bitset generated by genTileRegion of TileEditor\n  // so, each bit marks the presence of active or inactive neighbor tiles:\n  //\n  // bitset: 0b3210\n  // matrix (center is ignored):\n  // [   0\n  //  1     2\n  //     3   ],\n  //\n  // For each combination of tiles, there is one right tile, this is how\n  // auto-tiling works :D\n  //\n  // that said, the `autoTilerMap` variable maps each tileRegion combination with an array, this array\n  // contains two entries, which is tileX and tileY.\n\n  // note: the order that I added the entries here is from the tileset, from upper-left, left-to-right.\n  const autoTilerMap = new Array(16).fill([0, 0]);\n\n  // first line of tileset\n  //             b3210     x  y\n  autoTilerMap[0b0000] = [0, 0];\n  autoTilerMap[0b0100] = [1, 0];\n  autoTilerMap[0b0110] = [2, 0];\n  autoTilerMap[0b0010] = [3, 0];\n\n  // second line of tileset\n  //             b3210     x  y\n  autoTilerMap[0b1000] = [0, 1];\n  autoTilerMap[0b1100] = [1, 1];\n  autoTilerMap[0b1110] = [2, 1];\n  autoTilerMap[0b1010] = [3, 1];\n\n  // third line of tileset\n  //             b3210     x  y\n  autoTilerMap[0b1001] = [0, 2];\n  autoTilerMap[0b1101] = [1, 2];\n  autoTilerMap[0b1111] = [2, 2];\n  autoTilerMap[0b1011] = [3, 2];\n\n  // fourth line of tileset\n  //             b3210     x  y\n  autoTilerMap[0b0001] = [0, 3];\n  autoTilerMap[0b0101] = [1, 3];\n  autoTilerMap[0b0111] = [2, 3];\n  autoTilerMap[0b0011] = [3, 3];\n\n  let tileXY = autoTilerMap[tileRegion];\n\n  let tileX = tileXY[0];\n  let tileY = tileXY[1];\n\n  const x = -18 * tileX;\n  const y = -18 * tileY;\n\n  const inline_style = {\n    backgroundImage: \"url('tileset.png')\",\n    backgroundPosition: `${x}px ${y}px`,\n  }\n\n  return (\n    <div className=\"tileImg\" style={props.isActive ? inline_style : {}}>\n    </div>\n  );\n}\n\nfunction TileButton(props) {\n  return (\n    <button className={\"tile_button\" + (props.isActive ? \" active_tile\" : \"\") } onClick={() => props.onClick(props.tileIndex)}>\n      {props.tileIndex}\n    </button>\n  );\n}\n\nclass TileEditor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      map: Array(50).fill(false),\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.genTileRegion = this.genTileRegion.bind(this);\n  }\n\n  genTileRegion(i) {\n    let map = this.state.map;\n\n    // first, create a 3x3 matrix as an array of 8 entries (because is ignoring `i`'s tile)\n    // [   0,\n    //  1,    2,\n    //     3   ],\n    let arrTileRegion = Array(4).fill(false);\n\n    arrTileRegion[0] = i - 10 >= 0 ? map[i - 10] : false;\n    arrTileRegion[1] = i -  1 >= 0 ? map[i -  1] : false;\n\n    arrTileRegion[2] = i +  1 < map.length ? map[i +  1] : false;\n    arrTileRegion[3] = i + 10 < map.length ? map[i + 10] : false;\n\n    // handle map boundaries]\n    switch (i % 10) {\n      case 0: arrTileRegion[1] = false; break; // left boundary, overwrite left tile as \"no-tile\"\n      case 9: arrTileRegion[2] = false; break; // right boundary, overwrite right tile as \"no-tile\"\n    }\n\n    let tileRegion = 0;\n\n    // then, convert the array (matrix) to a bitset: 0b3210\n    for (let x = 0; x < 4; x++)\n      tileRegion = tileRegion | ((arrTileRegion[x] ? 1 : 0) << x);\n\n    return tileRegion;\n  }\n\n  handleClick(tileIndex) {\n    let map = this.state.map.slice();\n    map[tileIndex] = !map[tileIndex];\n    this.setState({map: map})\n  }\n\n  render() {\n    let tileEditorButtons = [];\n    let tileMapTiles = [];\n\n    let map = this.state.map;\n    for (let i = 0; i < 50; i++) {\n      let curTile = map[i];\n\n      let tileRegion = this.genTileRegion(i);\n\n      tileEditorButtons.push(<TileButton tileIndex={i} onClick={this.handleClick} isActive={curTile} key={i} />);\n\n      tileMapTiles.push(<TileImg key={i} isActive={curTile} tileRegion={tileRegion} tileIndex={i} />);\n\n      if (i % 10 === 9) {\n        tileEditorButtons.push(<br key={i + \"_TE_br\"}/>);\n        tileMapTiles.push(<br key={i + \"_TM_br\"}/>);\n      }\n    }\n\n    return (\n      <div id=\"tile_editor\">\n        <div className=\"tile_editor_pannel\">\n          <div id=\"tile_editor_buttons\">\n            {tileEditorButtons}\n          </div>\n        </div>\n        <div className=\"tile_editor_pannel\">\n          <div id=\"tile_editor_preview\">\n            {tileMapTiles}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main>\n        <h1>Autotiler toy<br/>simple autotiling and React experiment</h1>\n        <p>\n          Made by <a href=\"https://github.com/Andre-LA/\">Andr√© Luiz Alvares</a><br/>\n          see <a href=\"https://github.com/Andre-LA/my-autotiler-toy\">source code</a>.<br/>\n          <a href=\"https://www.kenney.nl/assets/pixel-platformer\">Tileset made by Kenney</a>.\n        </p>\n        <TileEditor />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}